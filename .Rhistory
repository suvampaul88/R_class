f <- function() {
x <- 1
y <- 2
c(x, y)
}
f()
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k()
# Finish the pow_two() function
pow_two <- function(x, print_info = TRUE) {
y <- x ^ 2
if print_info {
print(paste(x, "to the power two equals", y))}
return(y)
}
# Finish the pow_two() function
pow_two <- function(x, print_info = TRUE) {
y <- x ^ 2
if (print_info == TRUE) print(paste(x, "to the power two equals", y))
return(y)
}
pow_two(2, print_info = TRUE)
pow_two(2, print_info = FALSE)
rm(list=ls(all=TRUE))
expo_function <- function(x, y) {
z <- x ^ y
return(y)
}
expo_function(2,4)
x
y
x <- NaN
x
y <- as.logical(x)
y
?is.nan
x <- 1/0
x
y <- 0/0
y
library(purrr)
readLines
safe_readLines() <- safely(readLines())
library(tibble)
library(dplyr)
library(broom)
library(ggplot2)
results <- lm(mpg ~ ., data = mtcars)
summary(results)
td <- broom::tidy(results)
td$conf.low <- td$estimate - td$std.error
td$conf.high <- td$estimate + td$std.error
ggplot2::ggplot(td, aes(estimate, term, color = term)) +
geom_point() +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high))
results2 <- mtcars %>% dplyr::group_by(cyl) %>%  dplyr::do(fit = lm(mpg ~ ., data = .))
td <- results2 %>% broom::tidy(fit)
td_wide <- td %>% dplyr::select(cyl, term, estimate) %>% tidyr::spread(term, estimate)
td
td_wide
td
View(td)
td$conf.low <- td$estimate - td$std.error
td$conf.high <- td$estimate + td$std.error
td
ggplot2::ggplot(td, aes(estimate, term, color = term)) +
geom_point() +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
facet_grid(.~cyl)
View(td)
bx <- replicate(5, runif(10), simplify = FALSE)
ry <- replicate(5, rpois(10,5)+1, simplify = FALSE)
out <- vector("double", length(bx))
out <- vector("double", length(bx))
for (i in seq_along(bx)) {
out[i] <- median(bx[[i]])
}
out
out <- vector("double", length(ry))
for (i in seq_along(ry)) {
out[i] <- mean(ry[[i]])
}
out
# R Programming for Data Analysis
rm(list = ls())
#read in data
library(stringr)
library(tibble)
setwd("~/Desktop")
data <- read.csv("data.csv")
as_tibble(data)
#let's problem solve
loc <- str_locate(data$question, "_")
str_sub(data$question, 1, loc[, "start"] -1)
loc2 <- str_locate_all(data$question, "_")
str_sub(data$question,  unlist((lapply(loc2, "[[", 1))) + 1, unlist((lapply(loc2, "[[", 2))) - 1)
#let's create functions
parse_case <- function(stringval) {
loc <- str_locate(stringval, "_")
str_sub(stringval, 1, loc[, "start"] -1)
}
parse_skills <- function(stringval) {
loc <- str_locate_all(stringval, "_")
str_sub(stringval, unlist((lapply(loc, "[[", 1))) + 1, unlist((lapply(loc, "[[", 2))) - 1)
}
parse_varname <- function(stringval) {
loc <- str_locate_all(stringval, "_")
str_sub(stringval, unlist((lapply(loc, "[[", 2))) + 1)
}
#let's wrangle
data$case <- parse_case(data$question)
data$skills <- parse_skills(data$question)
data$varname <- parse_varname(data$question)
setwd("~/Desktop/R_class")
setwd("~/Desktop/R_class")
#read in data
library(stringr)
library(tibble)
setwd("~/Desktop/R_class")
data <- read.csv("data.csv")
as_tibble(data)
#let's problem solve
loc <- str_locate(data$question, "_")
str_sub(data$question, 1, loc[, "start"] -1)
loc2 <- str_locate_all(data$question, "_")
str_sub(data$question,  unlist((lapply(loc2, "[[", 1))) + 1, unlist((lapply(loc2, "[[", 2))) - 1)
#let's create functions
parse_case <- function(stringval) {
loc <- str_locate(stringval, "_")
str_sub(stringval, 1, loc[, "start"] -1)
}
parse_skills <- function(stringval) {
loc <- str_locate_all(stringval, "_")
str_sub(stringval, unlist((lapply(loc, "[[", 1))) + 1, unlist((lapply(loc, "[[", 2))) - 1)
}
parse_varname <- function(stringval) {
loc <- str_locate_all(stringval, "_")
str_sub(stringval, unlist((lapply(loc, "[[", 2))) + 1)
}
#let's wrangle
data$case <- parse_case(data$question)
data$skills <- parse_skills(data$question)
data$varname <- parse_varname(data$question)
View(data)
# R Programming for Data Analysis
rm(list = ls())
b <- c(1,2,3,4)
d <- c(2,3,4,5)
b
d
b + d
b1 <- c(1,2,NA,4)
d1 <- c(2,3,4,5)
b1 + d1
b2 <- c(T,T,F,F)
d2 <- c(2,3,4,5)
b2 + d2
b3 <- c(3,4,6)
d3 <- c(3,4,5,6,7)
b3 + d3
x <- list(1:3, c("a", "b","c"), c(TRUE, FALSE, TRUE), c(2.3, 5.9, 1.4))
x
dat_1 <- data.frame(x)
dat_1
x[1]
x[1:2]
x[[1]]
x[1]
str(x[1])
str(x[[1]])
df <- data.frame (
col_a = rnorm(100),
col_b = rnorm(100),
col_c = rnorm(100),
col_d = rnorm(100)
)
df[,1]
median(df[,1])
df[[1]]
median(df$col_a)
bx <- replicate(5, runif(10), simplify = FALSE)
ry <- replicate(5, rpois(10,5)+1, simplify = FALSE)
bx
ry <- replicate(5, rpois(10,5)+1, simplify = FALSE)
ry
out <- vector("double", length(bx))
out
for (i in seq_along(bx)) {
out[i] <- median(bx[[i]])
}
out
median(bx[[1]])
median(bx[[2]])
median(bx[[3]])
for (i in seq_along(bx)) {
out[i] <- mean(bx[[i]])
}
out
out <- vector("double", length(bx))
for (i in seq_along(bx)) {
out[i] <- mean(bx[[i]])
}
out
func_median <- function(list_factor) {
out <- vector(mode = "double", length = length(list_factor))
for (i in seq_along(list_factor)) {
out[i] <- median(list_factor[[i]])
}
out
}
median_values <- func_median(ry)
median_values <- func_median(bx)
median_values <- func_median(ry)
median_values2 <- func_median(bx)
median_values
median_values2
data(mtcars)
names(mtcars)
lapply(bx, mean)
unlist(lapply(bx, mean))
sapply(mtcars, median)
sapply(mtcars, mean)
library(stringr)
library(tibble)
setwd("~/Desktop/R_class")
data <- read.csv("data.csv")
as_tibble(data)
loc <- str_locate(data$question, "_")
loc
loc[, "start"] -1
str_sub(data$question, 1, loc[, "start"] -1)
parse_case <- function(stringval) {
loc <- str_locate(stringval, "_")
str_sub(stringval, 1, loc[, "start"] -1)
}
data$case <- parse_case(data$question)
View(data)
loc2 <- str_locate_all(data$question, "_")
loc2
unlist((lapply(loc2, "[[", 1))
unlist((lapply(loc2, "[[", 1)))
(lapply(loc2, "[[", 1))
loc2 <- str_locate_all(data$question, "_")
loc2
str_sub(data$question,  unlist((lapply(loc2, "[[", 1))) + 1, unlist((lapply(loc2, "[[", 2))) - 1)
parse_skills <- function(stringval) {
loc <- str_locate_all(stringval, "_")
str_sub(stringval, unlist((lapply(loc, "[[", 1))) + 1, unlist((lapply(loc, "[[", 2))) - 1)
}
data$skills <- parse_skills(data$question)
parse_varname <- function(stringval) {
loc <- str_locate_all(stringval, "_")
str_sub(stringval, unlist((lapply(loc, "[[", 2))) + 1)
}
data$varname <- parse_varname(data$question)
results <- lm(mpg ~ ., data = mtcars)
summary(results)
td <- broom::tidy(results)
td
td$conf.low <- td$estimate - td$std.error
td$conf.high <- td$estimate + td$std.error
ggplot2::ggplot(td, aes(estimate, term, color = term)) +
geom_point() +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high))
library(tibble)
library(dplyr)
library(broom)
library(ggplot2)
ggplot2::ggplot(td, aes(estimate, term, color = term)) +
geom_point() +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high))
View(td)
View(mtcars)
View(mtcars)
td <- results2 %>% broom::tidy(fit)
results2 <- mtcars %>% dplyr::group_by(cyl) %>%  dplyr::do(fit = lm(mpg ~ ., data = .))
td <- results2 %>% broom::tidy(fit)
td
d$conf.low <- td$estimate - td$std.error
td$conf.high <- td$estimate + td$std.error
td$conf.low <- td$estimate - td$std.error
td$conf.high <- td$estimate + td$std.error
ggplot2::ggplot(td, aes(estimate, term, color = term)) +
geom_point() +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
facet_grid(.~cyl)
td_wide <- td %>% dplyr::select(cyl, term, estimate) %>% tidyr::spread(term, estimate)
View(td_wide)
