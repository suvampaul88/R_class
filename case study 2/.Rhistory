#>  [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE
(x2 <- which(x1))
#> [1]  2  4  6  8 10
(y1 <- 1:10 %% 5 == 0)
#>  [1] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE
(y2 <- which(y1))
x <- c(1,1,NA, NA)
y <- c(1, NA, 1, NA)
x
y
nax <- which(is.na(x))
nax
nay <- which(is.na(y))
nay
intersect(nax, nay)
both_na <- function(x,y) {
if (length(x) != length(y))
stop("'x' and 'y' must be the same length")
both_na <- function(x,y) {
if (length(x) != length(y))
stop("'x' and 'y' must be the same length")
}
x <- c(1,1,NA, NA)
y <- c(1, NA, 1, NA)
nax <- which(is.na(x))
nay <- which(is.na(y))
nax
nax <- which(is.na(x))
nay <- which(is.na(y))
nax <- which(is.na(x))
nax
nay <- which(is.na(y))
nay
a <- list(a = 1, b = 2)
a
a[[1]]
mtcars[[1]]
mtcars[["cyl"]]
a[["a"]]
a$"a"
mtcars[mtcars$gear == 5, ]
mtcars[mtcars$gear == 5 & mtcars$cyl == 4, ]
my_fun <- function(arg1, arg2) {
#body
}
add <- function(x, y =1) {
x + y
}
f <- function(x) {
x^2
}
f <- function(x) {
x^2
}
f
f <- function(x) {
x^2
}
formals(f)
body(f)
environment(f)
a <- matrix(1:9, nrow = 3)
colnames(a) <- c("A", "B", "C")
a
x <- 1:5
x[1]
str(x[1])
x[[1]]
str(x[[1]])
x <- 1:5
str(x[1:2])
str(x[[1:2]])
add <- function(x) {
function(y) x + y
}
adders <- lapply(1:10, add)
adders[[1]](10)
#> [1] 11
adders[[10]](10)
#> [1] 20
x
add <- function(x) {
function(y) x + y
}
adders <- lapply(1:10, add)
adders[[1]](10)
adders[[10]](10)
add <- function(x) {
force(x)
function(y) x + y
}
adders2 <- lapply(1:10, add)
adders2[[1]](10)
adders2[[10]](10)
add <- function(x) {
function(y) x + y
}
add(10)
add(10)(10)
add(10)(1)
adders <- lapply(1:10, add)
adders
x <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)()
`+`(1, `*`(2, 3))
mean(, TRUE, x = c(1:10, NA))
f2 <- function(a, b) {
a * 10
}
f2(10, stop("This is an error!"))
f <- function() {
x <- 1
y <- 2
c(x, y)
}
source('~/.active-rstudio-document', echo=TRUE)
x <- 2
g <- function() {
y <- 1
c(x, y)
}
source('~/.active-rstudio-document', echo=TRUE)
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
rm(x, h)
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k()
j <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
print(a)
}
j()
j <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
print(a)
}
j()
rm(j)
j <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
print(a)
}
j()
j <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
print(a)
}
j()
j <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
print(a)
}
j()
f <- function(arg1, arg2, arg3, arg4) {
list(a = arg1, b1 = arg2, b2 = arg3)
}
str(f(1,2,3))
str(f(2,3, a=1)
str(f(2,3, a=1)
str(f(2,3, a=1)
str(f(2,3, a=1))
str(f(1,2,3))
str(f(2,3, a=1))
f <- function(arg1, arg2, arg3, arg4) {
list(a = arg1, b1 = arg2, b2 = arg3)
}
f <- function(arg1, arg2, arg3, arg4) {
list(a = arg1, b1 = arg2, b2 = arg3)
}
str(f(1,2,3))
str(f(2,3,a = 1))
f <- function(arg1, arg2, arg3) {
list(a = arg1, b1 = arg2, b2 = arg3)
}
str(f(1,2,3))
str(f(2,3,a = 1))
f <- function(arg1, arg2, arg3) {
list(a = arg1, b1 = arg2, b2 = arg3)
}
str(f(1,2,3))
str(f(2,3,a = 1))
str(f(2,3,a = 1))
str(f(2,3,a = 1))
str(f(1,3,b = 1))
f <- function(arg1, arg2, arg3) {
list(a = arg1, b1 = arg2, b2 = arg3)
}
str(f(1,2,3))
str(f(2,3, a=1))
str(f(a=1,2,3))
str(f(a=1,b1=2,b2=3))
f <- function(arg1, arg2, arg3) {
list(a = arg1, b1 = arg2, b2 = arg3)
}
str(f(a=1,b1=2,b2=3))
f <- function(arg1, arg2, arg3) {
list(a = arg1, b1 = arg2, b2 = arg3)
}
str(f(1,2,3))
str(f(2,3, arg1 = b))
str(f(2,3, arg1 = 1))
f <- function(argh1s, arg2, arg3) {
list(a = arg1, b1 = arg2, b2 = arg3)
}
str(f(1,2,3))
str(f(2,3, argh1s = 1))
f <- function(argh1s, arg2, arg3) {
list(a = argh1s, b1 = arg2, b2 = arg3)
}
str(f(1,2,3))
str(f(2,3, argh1s = 1))
str(f(2,3, a = 1))
f <- function(argh1s, arg2, arg3) {
list(a = argh1s, b1 = arg2, b2 = arg3)
}
str(f(1,2,3))
str(f(2,3, argh1s = 1))
str(f(2,3, a = 1))
f <- function(argh1s, arg2, arg3) {
list(a = argh1s, b1 = arg2, b2 = arg3)
}
str(f(1,2,3))
str(f(2,3, argh1s = 1))
str(f(2,3, a = 1))
str(f(2,3, ar = 1))
f <- function(abcdef, bcde1, bcde2) {
list(a = abcdef, b1 = bcde1, b2 = bcde2)
}
str(f(1, 2, 3))
#> List of 3
#>  $ a : num 1
#>  $ b1: num 2
#>  $ b2: num 3
str(f(2, 3, abcdef = 1))
#> List of 3
#>  $ a : num 1
#>  $ b1: num 2
#>  $ b2: num 3
# Can abbreviate long argument names:
str(f(2, 3, a = 1))
f <- function(arghs, arg2, arg3) {
list(a = arghs, b1 = arg2, b2 = arg3)
}
str(f(1,2,3))
str(f(2,3, arghs = 1))
f <- function(abcdef, bcde1, bcde2) {
list(a = abcdef, b1 = bcde1, b2 = bcde2)
}
f <- function(arghs, arg2, arg3) {
list(a = arghs, b1 = arg2, b2 = arg3)
}
str(f(1,2,3))
str(f(2,3, arghs = 1))
str(f(2,3, a = 1))
f <- function(abcdef, bcde1, bcde2) {
list(a = abcdef, b1 = bcde1, b2 = bcde2)
}
str(f(1, 2, 3))
#> List of 3
#>  $ a : num 1
#>  $ b1: num 2
#>  $ b2: num 3
str(f(2, 3, abcdef = 1))
#> List of 3
#>  $ a : num 1
#>  $ b1: num 2
#>  $ b2: num 3
# Can abbreviate long argument names:
str(f(2, 3, a = 1))
f <- function(arghs, arg2, arg3) {
list(a = arghs, b1 = arg2, b2 = arg3)
}
str(f(1,2,3))
str(f(2,3, arghs = 1))
str(f(2,3, a = 1))
f <- function(arghs, arg2, arg3) {
list(a = arghs, b1 = arg2, b2 = arg3)
}
str(f(1,2,3))
str(f(2,3, arghs = 1))
str(f(2,3, a = 1))
f(2,3, a = 1)
f(1,2,3)
f(2,3, arghs = 1)
f(2,3, ar = 1)
# R Programming for Data Analysis
rm(list = ls())
a <- matrix(1:9, nrow = 3)
colnames(a) <- c("A", "B", "C")
a[1:2,]
library()
R.Version()
install.packages("roxygen2")
library()
library(roxygen2)
install.packages("rstudioapi")
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
R.Version()
library()
library(devtools)
library(roxygen2)
library(testthat)
library(knitr)
safe_readLines() <- safely(readLines())
library(purrr)
safe_readLines() <- safely(readLines())
x <- list(list(a = 1, b = 2), list(a = 3, b = 4), list(a = 5, b = 6))
x %>% transpose()
library(purrr)
x <- list(list(a = 1, b = 2), list(a = 3, b = 4), list(a = 5, b = 6))
x
x %>% transpose()
x
x %>% transpose() %>% simplify_all()
bx <- replicate(5, runif(10), simplify = FALSE)
ry <- replicate(5, rpois(10,5)+1, simplify = FALSE)
map2(xy,by, weighted.mean)
map2(ry,by, weighted.mean)
map2(rx,by, weighted.mean)
map2(bx,ry, weighted.mean)
pmap(list(bx, ry), weighted.mean)
a <- matrix(1:9, nrow = 3)
colnames(a) <- c("A", "B", "C")
a[1:2,]
a[c(T,F,T), c("B", "A")]
a
#Set working directory and get packages
setwd("~/Desktop/Assessment/USP OSCE Data (AC Consult)")
library(knitr)
library(ggplot2)
library(plyr)
library(tidyr)
library(jpeg)
library(dplyr, quietly = TRUE)
library(formattable)
library(stargazer, quietly = TRUE)
library(DataCombine, quietly = TRUE)
#opts_chunk$set(out.width='800px', dpi=200)
setwd("~/")
devtools::create()
devtools::create(~"~/Desktop")
rm(list = ls())
?ldply
?plyr::ldply
#Install packages using
#install.packages("package name")
#e.g. install.packages("tibble")
library(tibble)
library(tidyr)
library(dplyr)
library(broom)
library(ggplot2)
#set directory
setwd("~/Desktop/R_class/case study 3")
#getwd()
#look at data
data(mtcars)
names(mtcars)
View(mtcars)
results <- lm(mpg ~ ., data = mtcars)
summary(results)
td <- broom::tidy(results)
View(td)
ggplot2::ggplot(td, aes(estimate, term, color = term)) +
geom_point() +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high))
td$conf.low <- td$estimate - td$std.error
td$conf.high <- td$estimate + td$std.error
ggplot2::ggplot(td, aes(estimate, term, color = term)) +
geom_point() +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high))
#subset by cyl and run model
results2 <- mtcars %>% dplyr::group_by(cyl) %>%  dplyr::do(fit = lm(mpg ~ ., data = .))
td <- results2 %>% broom::tidy(fit)
td$conf.low <- td$estimate - td$std.error
td$conf.high <- td$estimate + td$std.error
View(results2)
View(td)
#subset by cyl and run model
results2 <- mtcars %>%
dplyr::group_by(cyl) %>%
dplyr::do(fit = lm(mpg ~ ., data = .))
td <- results2 %>% broom::tidy(fit)
td$conf.low <- td$estimate - td$std.error
td$conf.high <- td$estimate + td$std.error
ggplot2::ggplot(td, aes(estimate, term, color = term)) +
geom_point() +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
facet_grid(.~cyl)
data(mtcars)
names(mtcars)
str(mtcars)
median_func <- function(x) {
out <- vector(mode = "double", length = length(x))
for (i in seq_along(x)) {
out[i] <- median(x[[i]])
}
out
}
median_vals <- median_func(mtcars)
median_vals
lapply(mtcars, median)
sapply(mtcars, median)
#Install packages using install.packages("package name"), i.e. install.packages("stringr")
library(stringr)
library(tibble)
#read in data
setwd("~/Desktop/R_class")
data <- read.csv("data.csv")
View(data)
loc <- str_locate(data$question, "_")
loc
loc[, "start"]
str_sub(data$question, 1, loc[, "start"] -1)
loc2 <- str_locate_all(data$question, "_")
loc2
unlist((lapply(loc2, "[[", 1)))
sapply(loc2, "[[", 1)
str_sub(data$question,  unlist((lapply(loc2, "[[", 1))) + 1, unlist((lapply(loc2, "[[", 2))) - 1)
#let's create functions
parse_case <- function(stringval) {
loc <- str_locate(stringval, "_")
str_sub(stringval, 1, loc[, "start"] -1)
}
parse_skills <- function(stringval) {
loc <- str_locate_all(stringval, "_")
str_sub(stringval, unlist((lapply(loc, "[[", 1))) + 1, unlist((lapply(loc, "[[", 2))) - 1)
}
parse_varname <- function(stringval) {
loc <- str_locate_all(stringval, "_")
str_sub(stringval, unlist((lapply(loc, "[[", 2))) + 1)
}
#let's wrangle
data$case <- parse_case(data$question)
data$skills <- parse_skills(data$question)
data$varname <- parse_varname(data$question)
#Helpful for data wrangling/manipulation
#tidyr
#reshape2
#dplyr
#helpful paper: https://www.jstatsoft.org/article/view/v040i01
#read about functions in R here:
#http://adv-r.had.co.nz/Functions.html
#set directory
setwd("~/Desktop/R_class/case study 2")
#input path
input_path <- "/Users/suvampaul/Desktop/R_class/case study 2/data/input"
fi <- list.files(input_path,full.names=T)
fi
fi <- list.files(input_path,full.names=T)
dat <- lapply(fi,function(i) {read.csv(i, stringsAsFactors = FALSE)})
basename(fi)
names(dat) <- parse_filename(basename(fi))
parse_filename <- function(stringval) {
loc <- stringr::str_locate(stringval, "_")
stringr::str_sub(stringval, 1, loc[, "start"] -1)
}
names(dat) <- parse_filename(basename(fi))
names(dat) <- parse_filename(basename(fi))
dat
names(dat)
dat2 <- lapply(dat, reshape_list)
reshape_list <- function(data) {
data_molten <- reshape2::melt(data, id.vars = "student_id",  variable.name = "question", value.name = "response")
}
dat2 <- lapply(dat, reshape_list)
data <- plyr::ldply(dat2, stringsAsFactors = FALSE)
View(data)
data$.id <- NULL
lapply(names(dat2), function(x) write.csv(dat2[[x]], paste0(output_path,x,'.csv'), row.names = FALSE))
output_path <- "/Users/suvampaul/Desktop/R_class/case study 2/data/output/"
lapply(names(dat2), function(x) write.csv(dat2[[x]], paste0(output_path,x,'.csv'), row.names = FALSE))
