rm(list = ls())
#markdown
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
#tidyverse packages
library(ggplot2)
library(plyr)
library(dplyr)
library(tidyr)
library(readr)
library(purrr)
library(tibble)
library(stringr)
library(forcats)
#data table
library(data.table)
#set directory
setwd("/Users/suvampaul/Desktop/Education-Quality-Using-Open-Source-Data")
#quality of care individual profile
physicians_qualitycare_indv <- fread("Physician_Compare_2014_Individual_EP_Public_Reporting_-_Clinical_Quality_Of_Care.csv", stringsAsFactors = FALSE, verbose = TRUE, data.table = FALSE)
#rename variables
var_names <- c("npi", "pac.id", "last.name", "first.name", "depression", "tobaccouse", "bodyweight", "hbp", "compare_newoldmed", "aspmed_htstroke")
names(physicians_qualitycare_indv) <- var_names
#physician profile
physicians_profile <- fread("Physician_Compare_National_Downloadable_File.csv", stringsAsFactors = FALSE, verbose = TRUE, data.table = FALSE)
#make var names lowercase
names(physicians_profile) <- tolower(names(physicians_profile))
#subset data
subset_var_names <- names(physicians_profile) %in% c("npi", "pac id", "professional enrollment id", "last name", "first name", "credential", "medical school name", "graduation year", "primary specialty", "city", "zip code", "state")
physicians_profile_subset <- physicians_profile[subset_var_names]
#rename vars
var_names2 <- c("npi", "pac.id", "enrollment.id", "last.name", "first.name", "credential", "medical.school.name", "graduation.year", "primary.specialty", "city", "zip.code", "state")
names(physicians_profile_subset) <- var_names2
bubba <- list(first="one", second="two", third="third")
class(bubba)
class(bubba) <- append(class(bubba),"Flamboyancy")
class(bubba)
GetFirst <- function(x)
{
UseMethod("GetFirst",x)
}
GetFirst
NorthAmerican <- function(eatsBreakfast=TRUE,myFavorite="cereal")
{
me <- list(
hasBreakfast = eatsBreakfast,
favoriteBreakfast = myFavorite
)
## Set the name for the class
class(me) <- append(class(me),"NorthAmerican")
return(me)
}
NorthAmerican <- function(eatsBreakfast=TRUE,myFavorite="cereal")
{
me <- list(
hasBreakfast = eatsBreakfast,
favoriteBreakfast = myFavorite
)
## Set the name for the class
class(me) <- append(class(me),"NorthAmerican")
return(me)
}
NorthAmerican()
bubba <- NorthAmerican()
bubba
louis <- NorthAmerican(eatsBreakfast = TRUE, myFavorite = "fried eggs")
setHasBreakfast <- function(elObjeto, newValue)
{
print("Calling the base setHasBreakfast function")
UseMethod("setHasBreakfast",elObjeto)
print("Note this is not executed!")
}
setHasBreakfast
setHasBreakfast.default <- function(elObjeto, newValue)
{
print("You screwed up. I do not know how to handle this object.")
return(elObjeto)
}
setHasBreakfast.NorthAmerican <- function(elObjeto, newValue)
{
print("In setHasBreakfast.NorthAmerican and setting the value")
elObjeto$hasBreakfast <- newValue
return(elObjeto)
}
bubba <- NorthAmerican()
bubba$hasBreakfast
bubba <- setHasBreakfast(bubba,FALSE)
bubba$hasBreakfast
bubba <- NorthAmerican()
bubba$hasBreakfast
bubba <- setHasBreakfast(bubba,"No type checking!")
bubba$hasBreakfast
bubba <- setHasBreakfast(bubba)
bubba$hasBreakfast
bubba <- NorthAmerican()
bubba$hasBreakfast
bubba <- setHasBreakfast(bubba,FALSE)
bubba$hasBreakfast
bubba <- setHasBreakfast(bubba)
Texan <- function(eatsBreakfast=TRUE,myFavorite="ribs")
{
me <- list(
hasBreakfast = eatsBreakfast,
favoriteBreakfast = myFavorite
)
## Set the name for the class
class(me) <- append(class(me),"Texan")
return(me)
}
bubba2 <- Texan()
bubba2
Texan <- function(eatsBreakfast=FALSE,myFavorite="ribs")
{
me <- list(
hasBreakfast = eatsBreakfast,
favoriteBreakfast = myFavorite
)
## Set the name for the class
class(me) <- append(class(me),"Texan")
return(me)
}
bubba2 <- Texan()
bubba2
bubba2$hasBreakfast
bubba2 <- setHasBreakfast(bubba2,TRUE)
bubba$hasBreakfast
bubba2$hasBreakfast
setHasBreakfast.Texan <- function(elObjeto, newValue)
{
print("In setHasBreakfast.NorthAmerican and setting the value")
elObjeto$hasBreakfast <- newValue
return(elObjeto)
}
bubba2 <- setHasBreakfast(bubba2,TRUE)
bubba2$hasBreakfast
rm(list = ls())
#build file paths
#path list
paths_names <- list(user = "/Users", name = "suvampaul", desktop = "Desktop", folder = "clinical_skills_code", input = "input", output = "output/")
#create input and output paths
dir_path <- file.path(paths_names[["user"]], paths_names[["name"]], paths_names[["desktop"]], paths_names[["folder"]])
base_path_input <- paths_names[["input"]]
base_path_output <- paths_names[["output"]]
input_path <- file.path(dir_path, base_path_input)
output_path <- file.path(dir_path, base_path_output)
input_path
setwd("~/Desktop/R_class/case study 3")
#Install packages using
#install.packages("package name")
library(tibble)
library(tidyr)
library(dplyr)
library(broom)
library(ggplot2)
#set directory
setwd("~/Desktop/R_class/case study 3")
ggplot2::ggplot(td, aes(estimate, term, color = term)) +
geom_point() +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high)) +
facet_grid(.~cyl)
setwd("~/Desktop")
setwd("~/Desktop/R_class/case study 2")
fi <- list.files(input_path,full.names=T)
fi
setwd("~/Desktop/R_class/case study 2")
input_path <- "/Users/suvampaul/Desktop/R_class/case study 2"
#read in data
fi <- list.files(input_path,full.names=T)
fi
setwd("~/Desktop/R_class/case study 2")
input_path <- "/Users/suvampaul/Desktop/R_class/case study 2/data"
#read in data
fi <- list.files(input_path,full.names=T)
fi
dat <- lapply(fi,function(i) {read.csv(i, stringsAsFactors = FALSE)})
dat
?list.files
names(dat) <- parse_filename(basename(fi))
parse_filename <- function(stringval) {
loc <- stringr::str_locate(stringval, "_")
stringr::str_sub(stringval, 1, loc[, "start"] -1)
}
names(dat) <- parse_filename(basename(fi))
basename(fi)
names(dat) <- parse_filename(basename(fi))
reshape_list <- function(data) {
data_molten <- reshape2::melt(data, id.vars = "student_id",  variable.name = "question", value.name = "response")
}
dat <- lapply(listdat, reshape_list)
dat2 <- lapply(dat, reshape_list)
?ldply
data <- plyr::ldply(dat2, stringsAsFactors = FALSE)
View(data)
data$.id <- NULL
input_path <- "/Users/suvampaul/Desktop/R_class/case study 2/data/input"
#Helpful for data wrangling/manipulation
#tidyr
#reshape2
#dplyr
#helpful paper: https://www.jstatsoft.org/article/view/v040i01
#set directory
setwd("~/Desktop/R_class/case study 2")
#input path
input_path <- "/Users/suvampaul/Desktop/R_class/case study 2/data/input"
#helper functions
parse_filename <- function(stringval) {
loc <- stringr::str_locate(stringval, "_")
stringr::str_sub(stringval, 1, loc[, "start"] -1)
}
reshape_list <- function(data) {
data_molten <- reshape2::melt(data, id.vars = "student_id",  variable.name = "question", value.name = "response")
}
#Data Manipulation
#read in data
fi <- list.files(input_path,full.names=T)
dat <- lapply(fi,function(i) {read.csv(i, stringsAsFactors = FALSE)})
#name the list components
basename(fi)
names(dat) <- parse_filename(basename(fi))
#reshape the data
dat2 <- lapply(dat, reshape_list)
#make list of data frames into a single data frame for analysis
data <- plyr::ldply(dat2, stringsAsFactors = FALSE)
data$.id <- NULL
output_path <- "/Users/suvampaul/Desktop/R_class/case study 2/data/output/"
lapply(names(dat2), function(x) write.csv(dat2[[x]], paste0(output_path,x,'.csv'), row.names = FALSE))
